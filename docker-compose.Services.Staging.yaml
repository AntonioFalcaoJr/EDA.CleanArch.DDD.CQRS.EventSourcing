version: "3.9"
services:
  
  account-command:
    image: account-command:latest
    build:
      context: .
      dockerfile: ./src/Services/Account/Command/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: on-failure

  account-query:
    image: account-query:latest
    build:
      context: .
      dockerfile: ./src/Services/Account/Query/GrpcService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    depends_on:
      - 
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: on-failure
  
  catalog-command:
    image: catalog-command:latest
    build:
      context: .
      dockerfile: ./src/Services/Catalog/Command/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    depends_on:
      - 
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: on-failure

  catalog-query:
    image: catalog-query:latest
    build:
      context: .
      dockerfile: ./src/Services/Catalog/Query/GrpcService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    depends_on:
      - 
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: on-failure
  
  communication-command:
    image: communication-command:latest
    build:
      context: .
      dockerfile: ./src/Services/Communication/Command/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    depends_on:
      - 
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: on-failure

  communication-query:
    image: communication-query:latest
    build:
      context: .
      dockerfile: ./src/Services/Communication/Query/GrpcService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    depends_on:
      - 
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: on-failure
  
  identity-command:
    image: identity-command:latest
    build:
      context: .
      dockerfile: ./src/Services/Identity/Command/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    depends_on:
      - 
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: on-failure

  identity-query:
    image: identity-query:latest
    build:
      context: .
      dockerfile: ./src/Services/Identity/Query/GrpcService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    depends_on:
      - 
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: on-failure
  
  order-command:
    image: order-command:latest
    build:
      context: .
      dockerfile: ./src/Services/Order/Command/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    depends_on:
      - 
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: on-failure
  
  order-query:
    image: order-query:latest
    build:
      context: .
      dockerfile: ./src/Services/Order/Query/GrpcService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    depends_on:
      - 
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: on-failure
  
  payment:
    image: payment:latest
    build:
      context: .
      dockerfile: ./src/Services/Payment/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    depends_on:
      -
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: on-failure

  shopping-cart:
    image: shopping-cart:latest
    build:
      context: .
      dockerfile: ./src/Services/ShoppingCart/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    depends_on:
      -
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: on-failure
  
  warehouse:
    image: warehouse:latest
    build:
      context: .
      dockerfile: ./src/Services/Warehouse/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    depends_on:
      -
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: on-failure
  
  webapi:
    image: webapi:latest
    build:
      context: .
      dockerfile: ./src/Web/WebAPI/Dockerfile
    environment:
      ASPNETCORE_URLS: http://*:80
      ASPNETCORE_ENVIRONMENT: Staging
    ports:
      - "80"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    depends_on:
      -
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: on-failure
  
  webapp:
    image: webapp:latest
    build:
      context: .
      dockerfile: ./src/Web/WebAPP/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Staging
    ports:
      - "80"
    depends_on:
      webapi:
        condition: service_started
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
      restart_policy:
        condition: on-failure

networks:
  internal:
    name: internal
    driver: bridge