@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using BlazorStrap.Shared.Components.OffCanvas
@using Fluxor
@using BlazorStrap
@using WebAPP.DependencyInjection.HttpPolicies
@using WebAPP.Store.Cataloging
@using WebAPP.Store.Cataloging.Commands
@using WebAPP.Store.Cataloging.Events

@inject IState<CatalogingState> State
@inject IDispatcher Dispatcher

<BSOffCanvas @ref="Canvas" Placement="Placement.Right" OnHidden="CancelCatalogCreation()" ShowBackdrop="true">
    <Header>Create Catalog</Header>
    <Content>
        <div class="d-grid gap-2">
            <BSLabel>Title</BSLabel>
            <BSInput
                InputType="InputType.Text"
                placeholder="@nameof(State.Value.NewCatalog.Title)"
                @bind-Value="State.Value.NewCatalog.Title"
                IsDisabled="State.Value.IsCreating"/>
            <BSLabel>Description</BSLabel>
            <BSInput
                InputType="InputType.TextArea"
                placeholder="@nameof(State.Value.NewCatalog.Description)"
                @bind-Value="State.Value.NewCatalog.Description"
                IsDisabled="State.Value.IsCreating"/>
            <BSButton
                MarginTop="Margins.Large"
                Color="BSColor.Dark"
                OnClick="@CreateCatalog"
                IsDisabled="State.Value.IsCreating">
                @switch (State.Value.IsCreating)
                {
                        // TODO, I think we should remove this retry-counter concept 
                    case true when State.Value.IsRetrying is false:
                        <BSSpinner SpinnerType="SpinnerType.Grow" Color="BSColor.Light"/>
                        <p style="margin: auto">Retry number: @State.Value.RetryCount</p>
                        break;
                    case true when State.Value.IsRetrying:
                        <BSSpinner SpinnerType="SpinnerType.Grow" Color="BSColor.Light"/>
                        <p style="margin: auto">Retry number: @State.Value.RetryCount</p>
                        break;
                    default:
                        <p style="margin: auto">Create</p>
                        break;
                }
            </BSButton>
            @if (State.Value.HasError)
            {
                <BSAlert Color="BSColor.Danger" IsDismissible="true">
                    <BSAlertHeading>Error</BSAlertHeading>
                    <p>@State.Value.Error</p>
                </BSAlert>
            }
        </div>
    </Content>
</BSOffCanvas>

@code {

    private BSOffCanvas Canvas { get; set; } = new();
    private readonly CancellationTokenSource _cancellationTokenSource = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SubscribeToAction<CatalogCreationStarted>(_ => Canvas.ShowAsync());
        SubscribeToAction<CatalogCreated>(_ => Canvas.HideAsync());
    }

    private void CreateCatalog()
        => Dispatcher.Dispatch(new CreateCatalog(State.Value.NewCatalog, _cancellationTokenSource.Token));

    private Action<BSOffCanvasBase> CancelCatalogCreation()
        => _ => Dispatcher.Dispatch(new CatalogCreationAborted());

    protected override void Dispose(bool disposing)
    {
        if (disposing) _cancellationTokenSource.Dispose();
        base.Dispose(disposing);
    }

}