@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using BlazorStrap
@using Fluxor
@using WebAPP.Store.Cataloging
@using WebAPP.Store.Cataloging.Commands
@using WebAPP.Store.Cataloging.Events

@inject IState<CatalogingState> State
@inject IDispatcher Dispatcher

<BSModal @ref="Modal" DataId="modal" IsStaticBackdrop="true" IsCentered="true">
    <BSForm Model="State.Value.NewItem" OnValidSubmit="@AddCatalogItem">
        <DataAnnotationsValidator/>
        <BSModalHeader>New Catalog Item</BSModalHeader>
        <BSModalContent>
            <BSValidationSummary/>
            <div class="mb-3">
            <BSLabel>Search</BSLabel>
            <Select2/>
            </div>
            <div class="mb-3">
                <BSLabel>Name</BSLabel>
                <BSInput InputType="InputType.Text" placeholder="Name" @bind-Value="State.Value.SelectedProduct.Name"/>
                <BSFeedback For="@(() => State.Value.SelectedProduct.Name)"/>
            </div>
            <div class="mb-3">
                <BSLabel>Description</BSLabel>
                <BSInput InputType="InputType.TextArea" placeholder="Description" @bind-Value="State.Value.SelectedProduct.Description"/>
                <BSFeedback For="@(() => State.Value.SelectedProduct.Description)"/>
            </div>
        </BSModalContent>
        <BSModalFooter>
            @if (State.Value.HasError)
            {
                <BSAlert Color="BSColor.Danger" Dismissable="true">
                    <BSAlertHeading>Error</BSAlertHeading>
                    <p>@State.Value.Error</p>
                </BSAlert>
            }
            else
            {
                <BSButton
                    Color="BSColor.Dark"
                    OnClick="@AddCatalogItem"
                    IsDisabled="State.Value.IsAddingItem">
                    @if (State.Value.IsAddingItem)
                    {
                        <BSSpinner SpinnerType="SpinnerType.Grow" Color="BSColor.Light"/>
                    }
                    else
                    {
                        <p style="margin: auto">Add Item</p>
                    }
                </BSButton>
            }
        </BSModalFooter>
    </BSForm>
</BSModal>

@code {

    private BSModal Modal { get; set; } = new();
    private readonly CancellationTokenSource _cancellationTokenSource = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        SubscribeToAction<CatalogItemCreationStarted>(_ => Modal.ShowAsync());
    }

    private void AddCatalogItem()
        => Dispatcher.Dispatch(new AddCatalogItem(State.Value.CatalogId, State.Value.NewItem, _cancellationTokenSource.Token));
}