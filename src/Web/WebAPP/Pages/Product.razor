@using BlazorStrap
@inject IBlazorStrap BlazorStrap

<BSModal DataId="model9" OnShow="@(() => NewEmployee(new()))">
    <BSForm Model="_model" OnValidSubmit="@Update">
        <BSModalHeader>New ProductViewModel</BSModalHeader>
        <BSModalContent>
            <div class="mb-3">
                <BSLabel>ProductName</BSLabel>
                <BSInput InputType="InputType.Text" @bind-Value="_model.Name"/>
            </div>
            <div class="mb-3">
                <BSLabel>Description</BSLabel>
                <BSInput InputType="InputType.Text" @bind-Value="_model.Description"/>
            </div>
            <div class="mb-3">
                <BSLabel>SKU</BSLabel>
                <BSInput InputType="InputType.Text" @bind-Value="_model.Brand"/>
            </div>
            <div class="mb-3">
                <BSLabel>Unit Price</BSLabel>
                <BSInput InputType="InputType.Text" @bind-Value="_model.Category"/>
            </div>
            @* <div class="mb-3"> *@
            @*     <BSLabel>Picture</BSLabel> *@
            @*     <BSInput InputType="InputType.Email" placeholder="http://wwww.picture.com" @bind-Value="_model.PictureUri"/> *@
            @* </div> *@
        </BSModalContent>
        <BSModalFooter>
            <BSButton Target="model9">Cancel</BSButton>
            <BSButton IsSubmit="true" Color="BSColor.Primary">Save</BSButton>
        </BSModalFooter>
    </BSForm>
</BSModal>

<BSButton Color="BSColor.Primary" Target="model9">New Employee</BSButton>

@code {

    // BSModal refModal;

    private Product _model = new();

    private async Task NewEmployee(Product e)
    {
        _model = e;
        await Task.CompletedTask;
    }

    private async Task Update()
    {
        BlazorStrap.ForwardClick("model9");
        await Task.CompletedTask;
    }

    public object Name { get; set; }


    public object Description { get; set; }

    public object Brand { get; set; }

    public object Category { get; set; }

}