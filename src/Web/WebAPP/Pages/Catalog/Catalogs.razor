@page "/catalogs"

@inherits FluxorComponent

@using WebAPP.Models;

@using WebAPP.Pages.Catalog.Store

@inject IDispatcher Dispatcher
@inject IState<CatalogStore.CatalogState> CatalogState

<NavBar/>
<SearchBar/>
<BSToaster/>

<CascadingValue Value="this">
    <CatalogCanvas/>
    <BSContainer>
        <BSRow Align="Align.Center" Justify="Justify.Around">
            <BSCol Margin="Margins.Large">
                <h5 class="m-0">Catalogs</h5>
            </BSCol>
            <BSCol Column="1">
                <BSButton Class="bi bi-plus-lg" Color="BSColor.Light" style="font-size: 2.000rem;" OnClick="ShowCanvas" />
            </BSCol>
        </BSRow>
        <CatalogGrid/>
    </BSContainer>
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment ChildComponent { get; set; }

    private readonly CancellationTokenSource _cancellationTokenSource = new();

    private bool _canvasIsVisible = false;
    public bool CanvasIsVisible => _canvasIsVisible;

    public CatalogModel Catalog = new();

    private void ShowCanvas() 
        => Dispatcher.Dispatch(new CatalogStore.CatalogSetCanvasVisibilityAction(true));    

    private void HideCanvas()
        => Dispatcher.Dispatch(new CatalogStore.CatalogSetCanvasVisibilityAction(false));

    protected override async Task OnInitializedAsync()
    {
        Dispatcher.Dispatch(new CatalogStore.CatalogGetPagedAction());
        await base.OnInitializedAsync();
    }

    //public async Task ChangeCatalogTitleAsync(Guid catalogId, string title)
    //    => await httpClient.ChangeTitleAsync(catalogId, title, _cancellationTokenSource.Token);

    //public async Task ChangeCatalogDescriptionAsync(Guid catalogId, string description)
    //    => await httpClient.ChangeDescriptionAsync(catalogId, description, _cancellationTokenSource.Token);

    public async Task ChangeCatalogTitleAsync(Guid catalogId, string title)
        => await Task.CompletedTask;

    public async Task ChangeCatalogDescriptionAsync(Guid catalogId, string description)
        => await Task.CompletedTask;

    public async Task DeleteAsync(Guid catalogId)
    {
        //var response = await httpClient.DeleteAsync(catalogId, _cancellationTokenSource.Token);
        //if (response.Success)        
        //    ChangeCards(_cards.Where(catalog => catalog.Id != catalogId));
    }
    
    private void MoveToPageAsync(int page)
        => Dispatcher.Dispatch(new CatalogStore.CatalogGetPagedAction(Offset: page - 1));













    private async Task MoveToNextAsync()
    {
        //if (CatalogState.Page.HasNext)
        //    await FetchDataAsync(_cancellationTokenSource.Token, offset: CatalogState.Page.Current);
    }

    private async Task MoveToPreviewAsync()
    {
        //if (CatalogState.Page.HasPrevious)
        //    await FetchDataAsync(_cancellationTokenSource.Token, offset: CatalogState.Page.Current - 2);
    }
}