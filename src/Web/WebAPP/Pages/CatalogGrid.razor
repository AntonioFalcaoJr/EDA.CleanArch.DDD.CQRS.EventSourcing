@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using BlazorStrap
@using Fluxor
@using WebAPP.Store.Cataloging
@using WebAPP.Store.Cataloging.Queries

@inject IState<CatalogingState> State
@inject IDispatcher Dispatcher

@if (State.Value.IsFetching)
{
    <BSSpinner SpinnerType="SpinnerType.Grow" Color="BSColor.Dark" Size="Size.ExtraLarge"/>
}
else if (State.Value.Catalogs.Any())
{
    <div class="row row-cols-md-4">
        @foreach (var catalog in State.Value.Catalogs)
        {
            <BSCol MarginTopAndBottom="Margins.ExtraSmall" Padding="Padding.None">
                <CatalogCard Catalog="catalog"/>
            </BSCol>
        }
    </div>

    <Pagination
        Page="State.Value.Page"
        OnMoveToPage="MoveToPage"
        OnMoveToNext="MoveToNext"
        OnMoveToPrevious="MoveToPrevious"/>
}
else
{
    <p class="text-center">Add your first catalog</p>
}

@code {

    private readonly CancellationTokenSource _cancellationTokenSource = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ListCatalogs();
    }

    private void MoveToPage(ushort number) => ListCatalogs(number: number);
    private void MoveToNext() => ListCatalogs(number: State.Value.Page.Next);
    private void MoveToPrevious() => ListCatalogs(number: State.Value.Page.Previous);

    private void ListCatalogs(ushort size = 8, ushort number = 1)
        => Dispatcher.Dispatch(new ListCatalogs(new(size, number), _cancellationTokenSource.Token));
}