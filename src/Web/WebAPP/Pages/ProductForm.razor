@using BlazorStrap
@using WebAPP.Store.Cataloging
@inject IBlazorStrap BlazorStrap

<BSModal DataId="model" OnShow="@(() => NewEmployee(new()))">
    <BSForm Model="_model" OnValidSubmit="@Update">
        <BSModalHeader>New ProductFormViewModel</BSModalHeader>
        <BSModalContent>
            <div class="mb-3">
                <BSLabel>ProductFormName</BSLabel>
                <BSInput InputType="InputType.Text" @bind-Value="_model.Name"/>
            </div>
            <div class="mb-3">
                <BSLabel>Description</BSLabel>
                <BSInput InputType="InputType.Text" @bind-Value="_model.Description"/>
            </div>
            <div class="mb-3">
                <BSLabel>SKU</BSLabel>
                <BSInput InputType="InputType.Text" @bind-Value="_model.Brand"/>
            </div>
            <div class="mb-3">
                <BSLabel>Unit Price</BSLabel>
                <BSInput InputType="InputType.Text" @bind-Value="_model.Category"/>
            </div>
        </BSModalContent>
        <BSModalFooter>
            <BSButton Target="model">Cancel</BSButton>
            <BSButton IsSubmit="true" Color="BSColor.Primary">Save</BSButton>
        </BSModalFooter>
    </BSForm>
</BSModal>

<BSButton Color="BSColor.Primary" Target="model">New Employee</BSButton>

@code {

    // BSModal refModal;

    private Product _model = new();

    private async Task NewEmployee(Product e)
    {
        _model = e;
        await Task.CompletedTask;
    }

    private async Task Update()
    {
        BlazorStrap.ForwardClick("model");
        await Task.CompletedTask;
    }
}