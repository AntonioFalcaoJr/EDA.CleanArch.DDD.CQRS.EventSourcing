@using BlazorStrap
@using Fluxor
@using WebAPP.Store.Cataloging
@using WebAPP.Store.Cataloging.Commands
@using WebAPP.Store.Cataloging.Events

@inject IState<CatalogingState> State
@inject IDispatcher Dispatcher

<BSCard CardType="CardType.Card" Padding="Padding.None">
    <BSCard CardType="CardType.Header">
        @if (State.Value.IsEditingTitle)
        {
            <BSInput InputType="InputType.Text" @bind-Value="@Catalog.Title"/>
            <BSButton Class="bi bi-pencil-square" Color="BSColor.Warning" OnClick=@ChangeTitle></BSButton>
        }
        else
        {
            @Catalog.Title
            <BSButton Class="bi bi-pencil-square" Color="BSColor.Warning" OnClick=@ChangeTitleStarted></BSButton>
        }
    </BSCard>
    <BSCard CardType="CardType.Image" src="placeholder:286x180"/>
    <BSCard CardType="CardType.Body">
        <BSCard CardType="CardType.Title">@Catalog.Title</BSCard>
        <BSCard CardType="CardType.Subtitle">
            @if (State.Value.IsEditingDescription)
            {
                <BSInput InputType="InputType.Text" @bind-Value="@Catalog.Description"/>
                <BSButton Class="bi bi-pencil-square" Color="BSColor.Warning" OnClick=@ChangeDescription></BSButton>
            }
            else
            {
                @Catalog.Description
                <BSButton Class="bi bi-pencil-square" Color="BSColor.Warning" OnClick=@ChangeDescriptionStarted></BSButton>
            }
        </BSCard>
        <BSButton Class="bi bi-trash3" Color="BSColor.Danger" OnClick="@Delete"></BSButton>
    </BSCard>
    <BSCard CardType="CardType.Footer">Last updated 3 min ago</BSCard>
</BSCard>

@code {

    [Parameter]
    public Catalog Catalog { get; set; } = new();

    private readonly CancellationTokenSource _cancellationTokenSource = new();

    private void ChangeDescriptionStarted()
        => Dispatcher.Dispatch(new ChangeDescriptionStarted());

    private void ChangeTitleStarted()
        => Dispatcher.Dispatch(new ChangeTitleStarted());

    private void ChangeTitle()
        => Dispatcher.Dispatch(new ChangeTitle
        {
            CatalogId = Catalog.Id,
            NewTitle = Catalog.Title,
            CancellationToken = _cancellationTokenSource.Token
        });

    private void ChangeDescription()
        => Dispatcher.Dispatch(new ChangeDescription
        {
            CatalogId = Catalog.Id,
            NewDescription = Catalog.Description,
            CancellationToken = _cancellationTokenSource.Token
        });

    private void Delete()
        => Dispatcher.Dispatch(new DeleteCatalog
        {
            CatalogId = Catalog.Id,
            CancellationToken = _cancellationTokenSource.Token
        });

    private void Dispose()
        => _cancellationTokenSource.Cancel();

}