version: "3.9"

services:
  
  account-command:
    image: account-command:latest
    profiles: [ account, all ]
    build:
      context: .
      dockerfile: ./src/Services/Account/Command/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any

  account-query:
    image: account-query:latest
    profiles: [ account, all ]
    build:
      context: .
      dockerfile: ./src/Services/Account/Query/GrpcService/Dockerfile
    environment:
      ASPNETCORE_HTTP_PORTS: 80
      ASPNETCORE_ENVIRONMENT: Staging
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any

  catalog-command:
    image: catalog-command:latest
    profiles: [ catalog, all ]
    build:
      context: .
      dockerfile: ./src/Services/Catalog/Command/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any

  catalog-query:
    image: catalog-query:latest
    profiles: [ catalog, all ]
    build:
      context: .
      dockerfile: ./src/Services/Catalog/Query/GrpcService/Dockerfile
    environment:
      ASPNETCORE_HTTP_PORTS: 80
      ASPNETCORE_ENVIRONMENT: Staging
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any

  communication-command:
    image: communication-command:latest
    profiles: [ communication, all ]
    build:
      context: .
      dockerfile: ./src/Services/Communication/Command/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any

  communication-query:
    image: communication-query:latest
    profiles: [ communication, all ]
    build:
      context: .
      dockerfile: ./src/Services/Communication/Query/GrpcService/Dockerfile
    environment:
      ASPNETCORE_HTTP_PORTS: 80
      ASPNETCORE_ENVIRONMENT: Staging
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any

  identity-command:
    image: identity-command:latest
    profiles: [ identity, all ]
    build:
      context: .
      dockerfile: ./src/Services/Identity/Command/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any

  identity-query:
    image: identity-query:latest
    profiles: [ identity, all ]
    build:
      context: .
      dockerfile: ./src/Services/Identity/Query/GrpcService/Dockerfile
    environment:
      ASPNETCORE_HTTP_PORTS: 80
      ASPNETCORE_ENVIRONMENT: Staging
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any

  payment-command:
    image: payment-command:latest
    profiles: [ payment, all ]
    build:
      context: .
      dockerfile: ./src/Services/Payment/Command/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any

  payment-query:
    image: payment-query:latest
    profiles: [ payment, all ]
    build:
      context: .
      dockerfile: ./src/Services/Payment/Query/GrpcService/Dockerfile
    environment:
      ASPNETCORE_HTTP_PORTS: 80
      ASPNETCORE_ENVIRONMENT: Staging
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any

  shopping-command:
    image: shopping-command:latest
    profiles: [ shopping, all ]
    build:
      context: .
      dockerfile: ./src/Services/ShoppingCart/Command/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any

  shopping-query:
    image: shopping-query:latest
    profiles: [ shopping, all ]
    build:
      context: .
      dockerfile: ./src/Services/ShoppingCart/Query/GrpcService/Dockerfile
    environment:
      ASPNETCORE_HTTP_PORTS: 80
      ASPNETCORE_ENVIRONMENT: Staging
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any

  warehouse-command:
    image: warehouse-command:latest
    profiles: [ warehouse, all ]
    build:
      context: .
      dockerfile: ./src/Services/Warehouse/Command/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any

  warehouse-query:
    image: warehouse-query:latest
    profiles: [ warehouse, all ]
    build:
      context: .
      dockerfile: ./src/Services/Warehouse/Query/GrpcService/Dockerfile
    environment:
      ASPNETCORE_HTTP_PORTS: 80
      ASPNETCORE_ENVIRONMENT: Staging
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any

  webapi:
    image: webapi:latest
    profiles: [ web, all ]
    build:
      context: .
      dockerfile: ./src/Web/WebAPI/Dockerfile
    environment:
      ASPNETCORE_HTTP_PORTS: 80
      ASPNETCORE_ENVIRONMENT: Staging
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://webapi/healthz" ]
    depends_on:
      kibana:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any

  webapp:
    image: webapp:latest
    profiles: [ web, all ]
    build:
      context: .
      dockerfile: ./src/Web/WebAPP/Dockerfile
    environment:
      ASPNETCORE_HTTP_PORTS: 80
      ASPNETCORE_ENVIRONMENT: Staging
    depends_on:
      webapi:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
      restart_policy:
        condition: any

  proxy:
    container_name: proxy
    profiles: [ web, all ]
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      webapi:
        condition: service_healthy
      webapp:
        condition: service_started
    ports:
      - "8080:8080"
      - "5000:5000"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 80M
      restart_policy:
        condition: any
    networks:
      - internal      
        
  mssql:
    container_name: mssql
    profiles: [ infra, all ]
    image: mcr.microsoft.com/mssql/server
    ports:
      - "1433"
    environment:
      SA_PASSWORD: "!MyStrongPassword"
      ACCEPT_EULA: "Y"
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S mssql -U sa -P "$$SA_PASSWORD" -Q "SELECT 1" || exit 1
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
      restart_policy:
        condition: any
    networks:
      - internal

  rabbitmq:
    container_name: rabbitmq
    profiles: [ infra, all ]
    image: rabbitmq:3-management-alpine
    ports:
      - "5672"
      - "15672"
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
      RABBITMQ_DEFAULT_VHOST: "eventual-shop"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 400M
      restart_policy:
        condition: any
    networks:
      - internal

  mongodb:
    container_name: mongodb
    profiles: [ infra, all ]
    image: mongo:5.0.14
    ports:
      - "27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: "mongoadmin"
      MONGO_INITDB_ROOT_PASSWORD: "secret"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongodb:27017/test --quiet
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 500M
      restart_policy:
        condition: any
    networks:
      - internal

  elasticsearch:
    container_name: elasticsearch
    profiles: [ infra, all ]
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.2
    environment:
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - ELASTIC_USERNAME=EventualShop
      - ELASTIC_PASSWORD=EventualShop
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://elasticsearch:9200/_cluster/health" ]
    ulimits:
      memlock:
        soft: -1
        hard: -1
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: any
    ports:
      - "9200:9200"
      - "9300"
    networks:
      - internal

  kibana:
    container_name: kibana
    profiles: [ infra, all ]
    image: docker.elastic.co/kibana/kibana:8.6.2
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: EventualShop
      ELASTICSEARCH_PASSWORD: EventualShop
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://kibana:5601/api/status" ]
    ports:
      - "5601:5601"
    #    depends_on:
    #      elasticsearch:
    #        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: any
    networks:
      - internal

networks:
  internal:
    name: internal
    driver: bridge