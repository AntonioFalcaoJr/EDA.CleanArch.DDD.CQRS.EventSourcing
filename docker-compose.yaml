version: "3.9"
services:
  
  mssql:
    container_name: mssql
    image: mcr.microsoft.com/mssql/server
    ports:
      - "1433"
    environment:
      SA_PASSWORD: "!MyStrongPassword"
      ACCEPT_EULA: "Y"
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$$SA_PASSWORD" -Q "SELECT 1" || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: 1
          memory: 1500M
      restart_policy:
        condition: any
    networks:
      - internal
  
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    ports:
      - "5672"
      - "15672"
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
      RABBITMQ_DEFAULT_VHOST: "ecommerce"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: 1
          memory: 400M
      restart_policy:
        condition: any
    networks:
      - internal

  mongodb:
    container_name: mongodb
    image: mongo:5.0.14
    ports:
      - "27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: "mongoadmin"
      MONGO_INITDB_ROOT_PASSWORD: "secret"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongodb:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: 1
          memory: 500M
      restart_policy:
        condition: any
    networks:
      - internal

  account-command:
    image: account-command:latest
    build:
      context: .
      dockerfile: ./src/Services/Account/Command/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any

  account-query:
    image: account-query:latest
    build:
      context: .
      dockerfile: ./src/Services/Account/Query/GrpcService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any
  
  catalog:
    image: catalog:latest
    build:
      context: .
      dockerfile: ./src/Services/Catalog/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any
        
        
  communication-command:
    image: communication-command:latest
    build:
      context: .
      dockerfile: ./src/Services/Communication/Command/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any

  communication-query:
    image: communication-query:latest
    build:
      context: .
      dockerfile: ./src/Services/Communication/Query/GrpcService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any      

  identity-command:
    image: identity-command:latest
    build:
      context: .
      dockerfile: ./src/Services/Identity/Command/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any

  identity-query:
    image: identity-query:latest
    build:
      context: .
      dockerfile: ./src/Services/Identity/Query/GrpcService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any
  
  order-command:
    image: order-command:latest
    build:
      context: .
      dockerfile: ./src/Services/Order/Command/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any
  
  order-query:
    image: order-query:latest
    build:
      context: .
      dockerfile: ./src/Services/Order/Query/GrpcService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any
  
  payment:
    image: payment:latest
    build:
      context: .
      dockerfile: ./src/Services/Payment/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any

  shopping-cart:
    image: shopping-cart:latest
    build:
      context: .
      dockerfile: ./src/Services/ShoppingCart/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any
  
  warehouse:
    image: warehouse:latest
    build:
      context: .
      dockerfile: ./src/Services/Warehouse/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any
  
  webapi:
    image: webapi:latest
    build:
      context: .
      dockerfile: ./src/Web/WebAPI/Dockerfile
    environment:
      ASPNETCORE_URLS: http://*:80
      ASPNETCORE_ENVIRONMENT: Staging
    ports:
      - "80"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.20'
          memory: 200M
      restart_policy:
        condition: any
  
  webapp:
    image: webapp:latest
    build:
      context: .
      dockerfile: ./src/Web/WebAPP/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Staging
    ports:
      - "80"
    depends_on:
      webapi:
        condition: service_started
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
      restart_policy:
        condition: any

  proxy:
    container_name: proxy
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      webapi:
        condition: service_started
      webapp:
        condition: service_started
    ports:
      - "8080:8080"
      - "5000:5000"
    networks:
      - internal
    deploy:
      resources:
        limits:
          cpus: 1
          memory: 80M
      restart_policy:
        condition: any

networks:
  internal:
    name: internal
    driver: bridge